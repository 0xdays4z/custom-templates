# Porsche Security Testing Suite - Docker Compose Configuration
# Complete deployment stack with monitoring and database

version: '3.8'

services:
  # Main security testing suite
  porsche-security-suite:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: porsche-security-suite
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - CONFIG_FILE=/etc/porsche-security/security-suite.conf
      - LOG_LEVEL=info
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=porsche_security
      - DB_USER=security_user
      - DB_PASSWORD_FILE=/run/secrets/db_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "3000:3000"   # API port
      - "8443:8443"   # Dashboard HTTPS port
    volumes:
      - security_logs:/var/log/porsche-security
      - security_reports:/app/reports
      - security_backups:/app/backups
      - ./config/production.conf:/etc/porsche-security/environments/production.conf:ro
    secrets:
      - db_password
      - ssl_cert
      - ssl_key
    depends_on:
      - postgres
      - redis
    networks:
      - porsche_security_network
    healthcheck:
      test: ["CMD", "curl", "-f", "https://localhost:8443/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL database for storing reports and audit logs
  postgres:
    image: postgres:15-alpine
    container_name: porsche-security-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=porsche_security
      - POSTGRES_USER=security_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    secrets:
      - db_password
    networks:
      - porsche_security_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U security_user -d porsche_security"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: porsche-security-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-porsche_security_redis}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - porsche_security_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch for log aggregation and search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: porsche-security-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - porsche_security_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.0
    container_name: porsche-security-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=porsche-security-kibana
      - SERVER_HOST=0.0.0.0
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - porsche_security_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:10.1.0
    container_name: porsche-security-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-porsche_admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=https://localhost:3001
      - GF_SECURITY_COOKIE_SECURE=true
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - porsche_security_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: porsche-security-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - porsche_security_network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: porsche-security-node-exporter
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - porsche_security_network

  # Nginx reverse proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: porsche-security-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - security_logs:/var/log/nginx
    depends_on:
      - porsche-security-suite
      - grafana
      - kibana
    networks:
      - porsche_security_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backup service
  backup:
    image: alpine:3.18
    container_name: porsche-security-backup
    restart: unless-stopped
    environment:
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
      - RETENTION_DAYS=30
    volumes:
      - security_reports:/data/reports:ro
      - security_logs:/data/logs:ro
      - postgres_data:/data/postgres:ro
      - security_backups:/backups
      - ./docker/backup.sh:/backup.sh:ro
    command: |
      sh -c "
        apk add --no-cache dcron postgresql-client gzip tar
        echo '$$BACKUP_SCHEDULE /backup.sh' | crontab -
        crond -f
      "
    networks:
      - porsche_security_network

# Named volumes for persistent data
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  security_logs:
    driver: local
  security_reports:
    driver: local
  security_backups:
    driver: local

# Secrets for sensitive data
secrets:
  db_password:
    file: ./secrets/db_password.txt
  ssl_cert:
    file: ./secrets/ssl_cert.pem
  ssl_key:
    file: ./secrets/ssl_key.pem

# Custom network
networks:
  porsche_security_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16